apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-awtl
  template:
    metadata:
      labels:
        app: prometheus-awtl
    spec:
      volumes:
        - name: prometheus-mount
          configMap:
            name: prometheus-config
      containers:
        - name: prometheus-awtl
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-mount
              mountPath: /etc/prometheus/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      volumes:
        - name: grafana-mount
          configMap:
            name: grafana-config
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-mount
              mountPath: /etc/grafana/
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-clusterip
spec:
  type: ClusterIP
  selector:
    app: prometheus-awtl
  ports:
    - name: prometheus-awtl
      protocol: TCP
      port: 80
      targetPort: 9090
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-clusterip
spec:
  type: ClusterIP
  selector:
    app: grafana
  ports:
    - name: grafana
      protocol: TCP
      port: 80
      targetPort: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
data:
  grafana.ini: |
    [server]
    root_url = https://awtl-dev.met.no/grafana
    serv_from_sub_path = true
    [auth]
    disable_login_form = true
    [auth.generic_oauth]
    enabled = true
    scopes = openid email profile
    name = Keycloak
    tls_skip_verify_insecure = true
    allow_sign_up = true
    client_id = awtl-grafana
    client_secret = 4SUtpx8xc24Oo5tkNjlCjFkjjF7ch76o
    auth_url = https://awtl-dev.met.no/keycloak/auth/realms/awtl/protocol/openid-connect/auth
    token_url = https://awtl-dev.met.no/keycloak/auth/realms/awtl/protocol/openid-connect/token
    api_url = https://awtl-dev.met.no/keycloak/auth/realms/awtl/protocol/openid-connect/userinfo
    sign_out_url = https://awtl-dev.met.no/keycloak/auth/realms/awtl/protocol/openid-connect/logout?redirect_uri=https://awtl-dev.met.no/grafana/
    role_attribute_path = contains(realm_access.roles[*], 'admin') && 'Admin' || contains(realm_access.roles[*], 'editor') && 'Editor' || 'Viewer'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
    scrape_configs:
      - job_name: 'backend'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['awtl-backend-clusterip']
            labels:
              application: 'backend'
      - job_name: 'frontend'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['nginx-metrics-clusterip']
            labels:
              application: 'frontend'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      volumes:
        - name: nginx-mount
          configMap:
            name: nginx-config
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-mount
              mountPath: /etc/nginx/conf.d/
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-clusterip
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
    - name: nginx
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |-
    server {

      listen 80;

      location /grafana/ {
        proxy_pass         http://grafana-clusterip/;
        proxy_set_header   Host $host;
      }

      location /prometheus/ {
        proxy_set_header Accept-Encoding "";
        proxy_pass http://prometheus-clusterip/;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        sub_filter_types text/html;
        sub_filter_once off;
        sub_filter '="/' '="/prometheus/';
        sub_filter 'var PATH_PREFIX = "";' 'var PATH_PREFIX = "/prometheus";';

        rewrite ^/prometheus/?$ /prometheus/graph redirect;
        rewrite ^/prometheus/(.*)$ /$1 break;
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-metrics-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-metrics
  template:
    metadata:
      labels:
        app: nginx-metrics
    spec:
      containers:
        - name: nginx-metrics
          image: nginx/nginx-prometheus-exporter:0.10.0
          ports:
            - containerPort: 9113
          args:
            - -nginx.scrape-uri=http://awtl-frontend-clusterip/nginx_status
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-metrics-clusterip
spec:
  type: ClusterIP
  selector:
    app: nginx-metrics
  ports:
    - name: nginx-metrics
      protocol: TCP
      port: 80
      targetPort: 9113
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: awtl-monitor-ingress
spec:
  rules:
  - host: "awtl.met.no"
    http:
      paths:
      - pathType: Prefix
        path: "/prometheus"
        backend:
          service:
            name: nginx-clusterip
            port:
              number: 80
      - pathType: Prefix
        path: "/grafana"
        backend:
          service:
            name: nginx-clusterip
            port:
              number: 80